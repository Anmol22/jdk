/*
 * Copyright (c) 2024, 2025, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package sun.security.pkcs;

import sun.security.util.DerValue;
import sun.security.x509.AlgorithmId;

import javax.security.auth.DestroyFailedException;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serial;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.ProviderException;
import java.security.spec.NamedParameterSpec;
import java.util.Arrays;
import java.util.function.BiFunction;

/// Represents a private key from an algorithm family that is specialized
/// with a named parameter set.
///
/// This key is generated by either a [sun.security.provider.NamedKeyPairGenerator]
/// or [sun.security.provider.NamedKeyFactory]. Its [#getAlgorithm] method
/// returns the algorithm family name, while its [#getParams()] method returns
/// the parameter set name as a [NamedParameterSpec] object. The algorithm
/// identifier in the PKCS #8 encoding of the key is always a single OID derived
/// from the parameter set name.
///
/// Besides the [PKCS8Key#key] field, this class might contain an optional
/// alternative key stored in [#alt].
///
/// 1. If there is only `key`, there is only one private key encoding.
/// 2. If both `key` and `alt` exist. `key` is used in encoding,
///    and `alt` is used in calculation.
///
/// This allows ML-KEM or ML-DSA to encode the seed used in key pair
/// generation as the private key. In this case, `alt` will be the
/// expanded key as described in the FIPS documents. If the seed is
/// lost, `key` will be the expanded key and `alt` will be null.
///
/// For algorithms that do not have this "alternative" key format,
/// only `key` will be included and `alt` must be `null`.
///
/// @see sun.security.provider.NamedKeyPairGenerator
public final class NamedPKCS8Key extends PKCS8Key {
    @Serial
    private static final long serialVersionUID = 1L;

    private final String fname;
    private final transient NamedParameterSpec paramSpec;
    private final byte[] alt;

    private transient boolean destroyed = false;

    /// Ctor from raw key bytes.
    ///
    /// `rawBytes` and `alt` won't be cloned, caller
    /// must relinquish ownership.
    ///
    /// @param fname family name
    /// @param pname parameter set name
    /// @param rawBytes raw key bytes
    /// @param alt alternative key format, can be `null`.
    public NamedPKCS8Key(String fname, String pname, byte[] rawBytes, byte[] alt) {
        this.fname = fname;
        this.paramSpec = new NamedParameterSpec(pname);
        this.alt = alt;
        try {
            this.algid = AlgorithmId.get(pname);
        } catch (NoSuchAlgorithmException e) {
            throw new ProviderException(e);
        }
        this.key = rawBytes;
    }

    /// Ctor from family name and PKCS #8 encoding
    ///
    /// @param fname family name
    /// @param encoded PKCS #8 encoding. It is copied so caller can modify
    ///     it after the method call.
    /// @param genAlt a function that is able to calculate the alternative
    ///     key from raw key inside `encoded`. In the case of seed/expanded,
    ///     the function will calculate expanded from seed. If it recognizes
    ///     the input being already the expanded key, it must return `null`.
    ///     If there is no alternative key format, `getAlt` must be `null`.
    public NamedPKCS8Key(String fname, byte[] encoded,
            BiFunction<String, byte[], byte[]> genAlt) throws InvalidKeyException {
        super(encoded);
        this.fname = fname;
        this.alt = genAlt == null ? null : genAlt.apply(algid.getName(), this.key);
        paramSpec = new NamedParameterSpec(algid.getName());
        if (algid.getEncodedParams() != null) {
            throw new InvalidKeyException("algorithm identifier has params");
        }
    }

    @Override
    public String toString() {
        // Do not modify: this can be used by earlier JDKs that
        // do not have the getParams() method
        return paramSpec.getName() + " private key";
    }

    /// Returns the reference to the internal key. Caller must not modify
    /// the content or keep a reference.
    public byte[] getRawBytes() {
        return key;
    }

    /// Returns the reference to the key that will be used in computations
    /// inside `NamedKEM` or `NamedSignature` between `alt` (if exists)
    /// and `key`.
    ///
    /// This method currently simply chooses the longer one, where it is the
    /// expanded format. If the key used in computations is not the longer
    /// one for an algorithm, consider adding overridable methods to
    /// `NamedKEM` and `NamedSignature` to extract it.
    public byte[] getExpanded() {
        if (alt == null) {
            return key;
        } else {
            return alt.length > key.length ? alt : key;
        }
    }

    @Override
    public NamedParameterSpec getParams() {
        return paramSpec;
    }

    @Override
    public String getAlgorithm() {
        return fname;
    }

    @java.io.Serial
    private void readObject(ObjectInputStream stream)
            throws IOException, ClassNotFoundException {
        throw new InvalidObjectException(
                "NamedPKCS8Key keys are not directly deserializable");
    }

    @Override
    public void destroy() throws DestroyFailedException {
        Arrays.fill(key, (byte)0);
        if (alt != null) {
            Arrays.fill(alt, (byte)0);
        }
        if (encodedKey != null) {
            Arrays.fill(encodedKey, (byte)0);
        }
        destroyed = true;
    }

    @Override
    public boolean isDestroyed() {
        return destroyed;
    }
}
