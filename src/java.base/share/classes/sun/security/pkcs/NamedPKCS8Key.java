/*
 * Copyright (c) 2024, 2025, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package sun.security.pkcs;

import sun.security.x509.AlgorithmId;

import javax.security.auth.DestroyFailedException;
import java.io.IOException;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.Serial;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.ProviderException;
import java.security.spec.NamedParameterSpec;
import java.util.Arrays;
import java.util.function.BiFunction;

/// Represents a private key from an algorithm family that is specialized
/// with a named parameter set.
///
/// This key is generated by either a [sun.security.provider.NamedKeyPairGenerator]
/// or [sun.security.provider.NamedKeyFactory]. Its [#getAlgorithm] method
/// returns the algorithm family name, while its [#getParams()] method returns
/// the parameter set name as a [NamedParameterSpec] object. The algorithm
/// identifier in the PKCS #8 encoding of the key is always a single OID derived
/// from the parameter set name.
///
/// Besides the existing [PKCS8Key#key] field, this class optionally supports a
/// transformed format stored in [#transformed]. While `key` always represents
/// the base format used for encoding, an algorithm may perform pre-computation
/// to derive a transformed format, which may accelerate future operations.
/// The transformed format must be self-sufficient for cryptographic
/// computations without requiring the base format.
///
/// 1. If only `key` is present, it is used for both encoding and computations.
/// 2. If both `key` and `transformed` are available, `key` is used for encoding,
///    and `transformed` is used for computations.
///
/// For algorithms that do not define a transformed key format, only `key` is
/// included, and `transformed` must be `null`.
///
/// Note: When a transformed format is not defined, `key` and `transformed`
/// may hold the same value. However, subtle differences can arise depending
/// on if they are the same object. To avoid ambiguity, always set `transformed`
/// to `null`.
///
/// The encoding in `NamedPKCS8Key` differs from that of XDH and EdDSA keys.
/// While `key` is always placed inside an `OneAsymmetricKey` structure as an
/// OCTET STRING , for XDH and EdDSA, the `key` field itself is an OCTET STRING.
/// `NamedPKCS8Key` treats `key` as a generic opaque byte array.
///
/// @see sun.security.provider.NamedKeyPairGenerator
public final class NamedPKCS8Key extends PKCS8Key {
    @Serial
    private static final long serialVersionUID = 1L;

    private final String fname;
    private final transient NamedParameterSpec paramSpec;
    private final transient byte[] transformed;

    private transient boolean destroyed = false;

    /// Creates a `NamedPKCS8Key` from raw key bytes.
    ///
    /// `rawBytes` and `transformed` won't be cloned, caller
    /// must relinquish ownership.
    ///
    /// @param fname family name
    /// @param pname parameter set name
    /// @param rawBytes raw key bytes
    /// @param transformed transformed key format, can be `null`.
    public NamedPKCS8Key(String fname, String pname, byte[] rawBytes, byte[] transformed) {
        this.fname = fname;
        this.paramSpec = new NamedParameterSpec(pname);
        this.transformed = transformed;
        try {
            this.algid = AlgorithmId.get(pname);
        } catch (NoSuchAlgorithmException e) {
            throw new ProviderException(e);
        }
        this.key = rawBytes;
    }

    /// Creates a `NamedPKCS8Key` from family name and PKCS #8 encoding.
    ///
    /// @param fname family name
    /// @param encoded PKCS #8 encoding. It is copied so caller can modify
    ///     it after the method call.
    /// @param transform a function that is able to calculate the transformed
    ///     format from the base format inside `encoded`. If it recognizes
    ///     the input already in transformed format, it must return `null`.
    ///     If there is no transformed key format, `transform` must be `null`.
    ///     Whatever the case, the ownership of the result is fully granted
    ///     to this `NamedPKCS8Key` object.
    public NamedPKCS8Key(String fname, byte[] encoded,
            BiFunction<String, byte[], byte[]> transform) throws InvalidKeyException {
        super(encoded);
        this.fname = fname;
        this.transformed = transform == null ? null : transform.apply(algid.getName(), this.key);
        paramSpec = new NamedParameterSpec(algid.getName());
        if (algid.getEncodedParams() != null) {
            throw new InvalidKeyException("algorithm identifier has params");
        }
    }

    @Override
    public String toString() {
        // Do not modify: this can be used by earlier JDKs that
        // do not have the getParams() method
        return paramSpec.getName() + " private key";
    }

    /// Returns the reference to the internal key. Caller must not modify
    /// the content or pass the reference to untrusted application code.
    public byte[] getRawBytes() {
        return key;
    }

    /// Returns the reference to the key that will be used in computations.
    /// Caller must not modify the content or pass the reference to untrusted
    /// application code.
    public byte[] getTransformed() {
        return transformed == null ? key : transformed;
    }

    @Override
    public NamedParameterSpec getParams() {
        return paramSpec;
    }

    @Override
    public String getAlgorithm() {
        return fname;
    }

    @java.io.Serial
    private void readObject(ObjectInputStream stream)
            throws IOException, ClassNotFoundException {
        throw new InvalidObjectException(
                "NamedPKCS8Key keys are not directly deserializable");
    }

    @Override
    public void destroy() throws DestroyFailedException {
        Arrays.fill(key, (byte)0);
        if (transformed != null) {
            Arrays.fill(transformed, (byte)0);
        }
        if (encodedKey != null) {
            Arrays.fill(encodedKey, (byte)0);
        }
        destroyed = true;
    }

    @Override
    public boolean isDestroyed() {
        return destroyed;
    }
}
